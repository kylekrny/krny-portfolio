---
interface Props {
  id: string;
  title: string;
}

const { id, title } = Astro.props;
---

<div id={id} class="relative z-10 hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
  <!-- Modal Backdrop -->
  <div id="backdrop" class="fixed inset-0 bg-neutral-300/60 opacity-0 transition-opacity duration-500 ease-out" aria-hidden="true"></div>

  <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
      <!-- Modal Panel -->
      <div 
        class="relative transform overflow-hidden rounded-lg bg-neutral-50 px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl sm:p-6 opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95 ease-out duration-300"
      >
        <div class="flex justify-between mb-3">
          <h2 class="text-xl font-bold leading-6 text-gray-900" id="modal-title">
            {title}
          </h2>
            <button 
              type="button" 
              data-close-id={id} 
              class="close-modal rounded-md text-gray-400 hover:text-blue-500 transition-colors ease-out duration-300 focus:outline-none"
            >
              <span class="sr-only">Close</span>
              <svg class="size-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
              </svg>
            </button>
        </div>
        <div>
          <slot />
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { actions } from 'astro:actions'
  document.addEventListener("DOMContentLoaded", () => {
    function openModal(modal: HTMLElement) {
      if (!modal) return;
      modal.classList.remove("hidden");

      // Animate in
      const fixedElement = modal.querySelector(".fixed");
      if (fixedElement) {
        fixedElement.classList.remove("opacity-0");
        fixedElement.classList.add("opacity-100");
      }
      const relativeElement = modal.querySelector(".relative");
      if (relativeElement) {
        relativeElement.classList.remove("opacity-0", "translate-y-4", "sm:translate-y-0", "sm:scale-95");
        relativeElement.classList.add("opacity-100", "translate-y-0", "sm:scale-100");
      }

      // Add event listeners for closing
      document.addEventListener("keydown", escClose);
      modal.addEventListener("click", outsideClickClose);
    }

    function closeModal(modal: HTMLElement) {
      if (!modal) return;

      // Animate out
      const fixedElement = modal.querySelector(".fixed");
      if (fixedElement) {
        fixedElement.classList.remove("opacity-100");
        fixedElement.classList.add("opacity-0");
      }
      const relativeElement = modal.querySelector(".relative");
      if (relativeElement) {
        relativeElement.classList.remove("opacity-100", "translate-y-0", "sm:scale-100");
        relativeElement.classList.add("opacity-0", "translate-y-4", "sm:translate-y-0", "sm:scale-95");
      }

      // Wait for animation to finish before hiding
      setTimeout(() => {
        modal.classList.add("hidden");
      }, 200); // Match animation duration

      // Remove event listeners
      document.removeEventListener("keydown", escClose);
      modal.removeEventListener("click", outsideClickClose);
    }

    function escClose(event: KeyboardEvent) {
      if (event.key === "Escape") {
        document.querySelectorAll(".relative.z-10:not(.hidden)").forEach((modal) => closeModal(modal as HTMLElement));
      }
    }

    document.querySelector("#backdrop")?.addEventListener("click", () => {
      document.querySelectorAll(".relative.z-10:not(.hidden)").forEach((modal) => closeModal(modal as HTMLElement));
    });

    function outsideClickClose(event: MouseEvent) {
      const modal = event.currentTarget;
      const target = event.target as HTMLElement;
      if (target && (target === modal || target.classList.contains("fixed"))) {
        if (modal instanceof HTMLElement) {
          closeModal(modal);
        }
      }
    }

    // Open Modal
    document.querySelectorAll(".open-modal").forEach(button => {
      button.addEventListener("click", () => {
        const modalId = button.getAttribute("data-modal-id");
        if (!modalId) return;
        const modal = document.getElementById(modalId);
        if (!modal) return;
        openModal(modal);
      });
    });

    // Close Modal
    document.querySelectorAll(".close-modal").forEach(button => {
      button.addEventListener("click", () => {
        const modalId = button.getAttribute("data-close-id");
        if (!modalId) return;
        const modal = document.getElementById(modalId);
        if (!modal) return;
        closeModal(modal);
      });
    });
  });

      
    
      type FormObject = {
        name: string;
        email: string;
        company: string;
        type: string;
        budget: string;
        timeline: string;
        description: string;
      }
    
      const handleFormSubmit = async (event: Event) => {
        event.preventDefault()
        const form = event.target as HTMLFormElement
        if (!form) return;
        const formData = new FormData(form)
        const formObject: FormObject = Object.fromEntries(formData.entries()) as FormObject
        console.log(formObject)
        const response = await actions.project(formObject)
        console.log(response)
        if (!response.error) {
          form.reset()
          alert('Thanks for reaching out! Iâ€™ll get back to you soon.')
        } else {
          alert('There was an error submitting the form. Please try again.')
        }
      }
      const form = document.getElementById('project-form')
      form?.addEventListener('submit', handleFormSubmit)

</script>
